extends RefCounted
## GDScript is created with static funcs that are used in the tween to get properties.
## This lets us "mutate" at runtime, allowing for randomization and lerping towards properties that changes since the tween was created.

static var _source_code: String
static var _method_count: int

static func start():
	_source_code = "#WARNING: AUTOGENERATED - CHANGES WILL BE LOST\nstatic var node: Node"
	_method_count = 0

static func finish(properties := {}) -> GDScript:
	var gd := GDScript.new()
	_source_code += "\n# %s" % Time.get_unix_time_from_system()
	_source_code = _source_code.replace("@", "node.")
	gd.source_code = _source_code
	gd.reload()
	for prop in properties:
		gd[prop] = properties[prop]
	_source_code = ""
	_method_count = 0
	return gd

static func add_static_func(expr: String, returns := true) -> StringName:
	var method_name := "_m%s" % _method_count
	if returns:
		_source_code += "\nstatic func %s(): return %s" % [method_name, expr]
	else:
		# Compiler gets annoyed if you return stuff for no reason...
		_source_code += "\nstatic func %s(): %s" % [method_name, expr]
	_method_count += 1
	return method_name

#func _eval(method_name: String) -> Variant:
	#return _script.call(method_name)
